// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/proto/thing/v1/thing_api.proto

package thingv1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/activeiot/activeiot-sdk-go/gen/go/api/proto/core/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CreateThingRequest ...
// @param thing - object to create
type CreateThingRequest struct {
	Thing *Thing `protobuf:"bytes,1,opt,name=thing,proto3" json:"thing,omitempty"`
}

func (m *CreateThingRequest) Reset()      { *m = CreateThingRequest{} }
func (*CreateThingRequest) ProtoMessage() {}
func (*CreateThingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{0}
}
func (m *CreateThingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateThingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateThingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateThingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThingRequest.Merge(m, src)
}
func (m *CreateThingRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateThingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThingRequest proto.InternalMessageInfo

func (m *CreateThingRequest) GetThing() *Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

// CreateThingResponse ...
// @param thing - created object
type CreateThingResponse struct {
	Thing *Thing `protobuf:"bytes,1,opt,name=thing,proto3" json:"thing,omitempty"`
}

func (m *CreateThingResponse) Reset()      { *m = CreateThingResponse{} }
func (*CreateThingResponse) ProtoMessage() {}
func (*CreateThingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{1}
}
func (m *CreateThingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateThingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateThingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateThingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThingResponse.Merge(m, src)
}
func (m *CreateThingResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateThingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThingResponse proto.InternalMessageInfo

func (m *CreateThingResponse) GetThing() *Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

// ListThingsRequest ...
// @param list_options - additional list options
type ListThingsRequest struct {
	Options *v1.ListOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *ListThingsRequest) Reset()      { *m = ListThingsRequest{} }
func (*ListThingsRequest) ProtoMessage() {}
func (*ListThingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{2}
}
func (m *ListThingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListThingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListThingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListThingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListThingsRequest.Merge(m, src)
}
func (m *ListThingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListThingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListThingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListThingsRequest proto.InternalMessageInfo

func (m *ListThingsRequest) GetOptions() *v1.ListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ListThingsResponse ...
// @param things - list of objects
// @param count - amount of results ignoring limit
type ListThingsResponse struct {
	Things []*Thing `protobuf:"bytes,1,rep,name=things,proto3" json:"things,omitempty"`
	Count  int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ListThingsResponse) Reset()      { *m = ListThingsResponse{} }
func (*ListThingsResponse) ProtoMessage() {}
func (*ListThingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{3}
}
func (m *ListThingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListThingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListThingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListThingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListThingsResponse.Merge(m, src)
}
func (m *ListThingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListThingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListThingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListThingsResponse proto.InternalMessageInfo

func (m *ListThingsResponse) GetThings() []*Thing {
	if m != nil {
		return m.Things
	}
	return nil
}

func (m *ListThingsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GetThingRequest ...
// @param id - id of thing to get
// @param get_options - additional get options
type GetThingRequest struct {
	ID      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options *v1.GetOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *GetThingRequest) Reset()      { *m = GetThingRequest{} }
func (*GetThingRequest) ProtoMessage() {}
func (*GetThingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{4}
}
func (m *GetThingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetThingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetThingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetThingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThingRequest.Merge(m, src)
}
func (m *GetThingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetThingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThingRequest proto.InternalMessageInfo

func (m *GetThingRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetThingRequest) GetOptions() *v1.GetOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// GetThingResponse ...
// @param thing - requested object
type GetThingResponse struct {
	Thing *Thing `protobuf:"bytes,1,opt,name=thing,proto3" json:"thing,omitempty"`
}

func (m *GetThingResponse) Reset()      { *m = GetThingResponse{} }
func (*GetThingResponse) ProtoMessage() {}
func (*GetThingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{5}
}
func (m *GetThingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetThingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetThingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetThingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThingResponse.Merge(m, src)
}
func (m *GetThingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetThingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetThingResponse proto.InternalMessageInfo

func (m *GetThingResponse) GetThing() *Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

// UpdateThingRequest ...
// @param thing - object data to update
// @param update_options - additional update options
type UpdateThingRequest struct {
	Thing   *Thing            `protobuf:"bytes,1,opt,name=thing,proto3" json:"thing,omitempty"`
	Options *v1.UpdateOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *UpdateThingRequest) Reset()      { *m = UpdateThingRequest{} }
func (*UpdateThingRequest) ProtoMessage() {}
func (*UpdateThingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{6}
}
func (m *UpdateThingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateThingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateThingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateThingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateThingRequest.Merge(m, src)
}
func (m *UpdateThingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateThingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateThingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateThingRequest proto.InternalMessageInfo

func (m *UpdateThingRequest) GetThing() *Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

func (m *UpdateThingRequest) GetOptions() *v1.UpdateOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// UpdateThingResponse ...
// @param thing - updated object
type UpdateThingResponse struct {
	Thing *Thing `protobuf:"bytes,1,opt,name=thing,proto3" json:"thing,omitempty"`
}

func (m *UpdateThingResponse) Reset()      { *m = UpdateThingResponse{} }
func (*UpdateThingResponse) ProtoMessage() {}
func (*UpdateThingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{7}
}
func (m *UpdateThingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateThingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateThingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateThingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateThingResponse.Merge(m, src)
}
func (m *UpdateThingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateThingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateThingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateThingResponse proto.InternalMessageInfo

func (m *UpdateThingResponse) GetThing() *Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

// DeleteThingRequest ...
// @param id - id of object to delete
// @param hard - should we do a hard delete? by default we do a soft delete
type DeleteThingRequest struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hard bool   `protobuf:"varint,2,opt,name=hard,proto3" json:"hard,omitempty"`
}

func (m *DeleteThingRequest) Reset()      { *m = DeleteThingRequest{} }
func (*DeleteThingRequest) ProtoMessage() {}
func (*DeleteThingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{8}
}
func (m *DeleteThingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteThingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteThingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteThingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThingRequest.Merge(m, src)
}
func (m *DeleteThingRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteThingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThingRequest proto.InternalMessageInfo

func (m *DeleteThingRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeleteThingRequest) GetHard() bool {
	if m != nil {
		return m.Hard
	}
	return false
}

// DeleteThingResponse ...
type DeleteThingResponse struct {
}

func (m *DeleteThingResponse) Reset()      { *m = DeleteThingResponse{} }
func (*DeleteThingResponse) ProtoMessage() {}
func (*DeleteThingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4db26a0e80329a6, []int{9}
}
func (m *DeleteThingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteThingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteThingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteThingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThingResponse.Merge(m, src)
}
func (m *DeleteThingResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteThingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateThingRequest)(nil), "activeiot.thing.v1.CreateThingRequest")
	proto.RegisterType((*CreateThingResponse)(nil), "activeiot.thing.v1.CreateThingResponse")
	proto.RegisterType((*ListThingsRequest)(nil), "activeiot.thing.v1.ListThingsRequest")
	proto.RegisterType((*ListThingsResponse)(nil), "activeiot.thing.v1.ListThingsResponse")
	proto.RegisterType((*GetThingRequest)(nil), "activeiot.thing.v1.GetThingRequest")
	proto.RegisterType((*GetThingResponse)(nil), "activeiot.thing.v1.GetThingResponse")
	proto.RegisterType((*UpdateThingRequest)(nil), "activeiot.thing.v1.UpdateThingRequest")
	proto.RegisterType((*UpdateThingResponse)(nil), "activeiot.thing.v1.UpdateThingResponse")
	proto.RegisterType((*DeleteThingRequest)(nil), "activeiot.thing.v1.DeleteThingRequest")
	proto.RegisterType((*DeleteThingResponse)(nil), "activeiot.thing.v1.DeleteThingResponse")
}

func init() { proto.RegisterFile("api/proto/thing/v1/thing_api.proto", fileDescriptor_d4db26a0e80329a6) }

var fileDescriptor_d4db26a0e80329a6 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x4f, 0xd4, 0x4a,
	0x18, 0xde, 0x29, 0x9f, 0xe7, 0xdd, 0x9c, 0x73, 0x38, 0xb3, 0x07, 0x02, 0xab, 0x8e, 0xa4, 0x20,
	0x12, 0x22, 0x6d, 0x16, 0x2f, 0x34, 0x5c, 0xc9, 0x87, 0x10, 0x12, 0x8d, 0x64, 0x83, 0xc4, 0x18,
	0x0c, 0xe9, 0xee, 0x8e, 0x65, 0x12, 0xe8, 0xd4, 0xed, 0xec, 0x1a, 0x43, 0x48, 0xd4, 0xf8, 0x03,
	0x4c, 0x4c, 0xfc, 0x01, 0x5e, 0x19, 0x7f, 0x89, 0xf1, 0x8a, 0xc4, 0x1b, 0xae, 0x8c, 0x14, 0x2f,
	0xbc, 0x24, 0xfe, 0x02, 0xd3, 0x99, 0xae, 0xdb, 0x6d, 0x07, 0x88, 0x78, 0xb5, 0xd3, 0x99, 0xe7,
	0x7d, 0x9e, 0xe7, 0x7d, 0xf7, 0x99, 0x16, 0x4c, 0xc7, 0x67, 0xb6, 0x5f, 0xe7, 0x82, 0xdb, 0x62,
	0x8b, 0x79, 0xae, 0xdd, 0x2c, 0xa9, 0xc5, 0xa6, 0xe3, 0x33, 0x4b, 0x1e, 0x60, 0xec, 0x54, 0x05,
	0x6b, 0x52, 0xc6, 0x85, 0x25, 0x8f, 0xac, 0x66, 0xa9, 0x38, 0xd6, 0xae, 0xab, 0xf2, 0x3a, 0x8d,
	0xca, 0x5c, 0x2a, 0x36, 0xb9, 0x2f, 0x18, 0xf7, 0x02, 0x55, 0x58, 0x1c, 0xcf, 0x82, 0xb6, 0x59,
	0x90, 0x46, 0x4d, 0x64, 0x51, 0x0d, 0xbf, 0xe6, 0x08, 0x9a, 0xc2, 0x91, 0x93, 0xac, 0xc6, 0xe7,
	0xd3, 0x2e, 0x13, 0x5b, 0x8d, 0x8a, 0x55, 0xe5, 0x3b, 0xb6, 0xcb, 0x5d, 0xae, 0xb0, 0x95, 0xc6,
	0x63, 0xf9, 0xa4, 0x0a, 0xa3, 0x55, 0x0c, 0xbf, 0xe8, 0x72, 0xee, 0x6e, 0x53, 0x3b, 0x62, 0x75,
	0x3c, 0x8f, 0x0b, 0x27, 0x29, 0x76, 0x4d, 0xfe, 0x54, 0xa7, 0x5d, 0xea, 0x4d, 0x07, 0x4f, 0x1d,
	0xd7, 0xa5, 0x75, 0x3b, 0xb6, 0x93, 0x45, 0x9b, 0xb7, 0x01, 0x2f, 0xd4, 0xa9, 0x23, 0xe8, 0x5a,
	0xe4, 0xa7, 0x4c, 0x9f, 0x34, 0x68, 0x20, 0xb0, 0x0d, 0x3d, 0xd2, 0xdf, 0x30, 0x1a, 0x45, 0x93,
	0xf9, 0x99, 0x11, 0x2b, 0x3b, 0x47, 0x4b, 0x15, 0x28, 0x9c, 0xb9, 0x04, 0x85, 0x0e, 0x9a, 0xc0,
	0xe7, 0x5e, 0x40, 0x7f, 0x9f, 0xe7, 0x2e, 0xfc, 0x77, 0x87, 0x05, 0x42, 0xee, 0x05, 0x2d, 0x37,
	0x37, 0xa1, 0x2f, 0x6e, 0x20, 0xe6, 0x21, 0x09, 0x9e, 0x68, 0xf0, 0x11, 0x4d, 0x54, 0x76, 0x4f,
	0xa1, 0xca, 0x2d, 0xb8, 0xf9, 0x08, 0x70, 0x92, 0x2e, 0x76, 0x55, 0x82, 0x5e, 0xa9, 0x16, 0xd1,
	0x75, 0x9d, 0x6e, 0x2b, 0x06, 0xe2, 0xff, 0xa1, 0xa7, 0xca, 0x1b, 0x9e, 0x18, 0x36, 0x46, 0xd1,
	0x64, 0x57, 0x59, 0x3d, 0x98, 0x15, 0xf8, 0x77, 0x99, 0x8a, 0x8e, 0xc9, 0x0d, 0x81, 0xc1, 0x6a,
	0xd2, 0xe6, 0x5f, 0xf3, 0xbd, 0xe1, 0x97, 0xcb, 0xc6, 0xca, 0x62, 0xd9, 0x60, 0x35, 0x7c, 0xa3,
	0xdd, 0x83, 0x21, 0x7b, 0xb8, 0xa4, 0xe9, 0x61, 0x99, 0x66, 0x5b, 0x58, 0x80, 0x81, 0xb6, 0xc6,
	0x79, 0xc7, 0xfa, 0x02, 0x01, 0xbe, 0x2f, 0x93, 0xf9, 0x47, 0x7f, 0x33, 0x9e, 0x4d, 0x77, 0x31,
	0xaa, 0xe9, 0x42, 0x09, 0x65, 0x1a, 0x59, 0x82, 0x42, 0x87, 0x85, 0xf3, 0xf6, 0x72, 0x0b, 0xf0,
	0x22, 0xdd, 0xa6, 0xa9, 0x56, 0x4e, 0x9a, 0x3b, 0x86, 0xee, 0x2d, 0xa7, 0x5e, 0x93, 0x76, 0xfb,
	0xcb, 0x72, 0x6d, 0x0e, 0x42, 0xa1, 0x83, 0x41, 0x39, 0x99, 0xf9, 0xd1, 0x0d, 0xfd, 0x72, 0x67,
	0x6e, 0x75, 0x05, 0x3f, 0x83, 0x7c, 0x22, 0xd0, 0x78, 0x42, 0x67, 0x2b, 0x7b, 0x71, 0x8a, 0x57,
	0xcf, 0xc4, 0x29, 0x31, 0x73, 0xe4, 0xe5, 0xe7, 0x6f, 0x6f, 0x8c, 0x82, 0xf9, 0x8f, 0xbc, 0xc5,
	0xad, 0xf7, 0x41, 0x30, 0x8b, 0xa6, 0x70, 0x00, 0xd0, 0x0e, 0x2d, 0xbe, 0xa2, 0x63, 0xcc, 0xdc,
	0x91, 0xe2, 0xc4, 0x59, 0xb0, 0x58, 0x77, 0x48, 0xea, 0x0e, 0xe0, 0x94, 0x2e, 0xae, 0x43, 0x7f,
	0x2b, 0x66, 0x78, 0x4c, 0xc7, 0x95, 0x0a, 0x7a, 0x71, 0xfc, 0x74, 0x50, 0x2c, 0x77, 0x41, 0xca,
	0x0d, 0xe2, 0x42, 0xa7, 0x9c, 0xbd, 0xcb, 0x6a, 0x7b, 0xf8, 0x15, 0x82, 0x7c, 0x22, 0x12, 0xfa,
	0x21, 0x67, 0x63, 0xab, 0x1f, 0xb2, 0x26, 0x5b, 0xe6, 0xb8, 0x54, 0x27, 0xc5, 0x91, 0xb4, 0xba,
	0xaa, 0x62, 0xb5, 0xbd, 0x68, 0xde, 0xbb, 0x90, 0x4f, 0xc4, 0x41, 0xef, 0x22, 0x9b, 0x38, 0xbd,
	0x0b, 0x4d, 0xae, 0x5a, 0x33, 0x98, 0xd2, 0xcd, 0x60, 0xfe, 0x2d, 0xda, 0x3f, 0x24, 0xb9, 0x83,
	0x43, 0x92, 0x3b, 0x3e, 0x24, 0xe8, 0x79, 0x48, 0xd0, 0xfb, 0x90, 0xa0, 0x8f, 0x21, 0x41, 0xfb,
	0x21, 0x41, 0x5f, 0x43, 0x82, 0xbe, 0x87, 0x24, 0x77, 0x1c, 0x12, 0xf4, 0xfa, 0x88, 0xe4, 0xf6,
	0x8f, 0x48, 0xee, 0xe0, 0x88, 0xe4, 0x60, 0xa8, 0xca, 0x77, 0x34, 0xfa, 0xf3, 0x7f, 0xab, 0x00,
	0xfb, 0x6c, 0x35, 0x7a, 0xbb, 0xaf, 0xa2, 0x87, 0x7d, 0xf2, 0xa8, 0x59, 0x7a, 0x67, 0x74, 0xcd,
	0xad, 0x3d, 0xf8, 0x60, 0xe0, 0xb9, 0x5f, 0x45, 0x12, 0x6a, 0xad, 0x97, 0x3e, 0x25, 0x36, 0x37,
	0xe4, 0xe6, 0xc6, 0x7a, 0xa9, 0xd2, 0x2b, 0xbf, 0x0f, 0xd7, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x32, 0x03, 0xe8, 0x23, 0x67, 0x07, 0x00, 0x00,
}

func (this *CreateThingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateThingRequest)
	if !ok {
		that2, ok := that.(CreateThingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Thing.Equal(that1.Thing) {
		return false
	}
	return true
}
func (this *CreateThingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateThingResponse)
	if !ok {
		that2, ok := that.(CreateThingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Thing.Equal(that1.Thing) {
		return false
	}
	return true
}
func (this *ListThingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListThingsRequest)
	if !ok {
		that2, ok := that.(ListThingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *ListThingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListThingsResponse)
	if !ok {
		that2, ok := that.(ListThingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Things) != len(that1.Things) {
		return false
	}
	for i := range this.Things {
		if !this.Things[i].Equal(that1.Things[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GetThingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetThingRequest)
	if !ok {
		that2, ok := that.(GetThingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *GetThingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetThingResponse)
	if !ok {
		that2, ok := that.(GetThingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Thing.Equal(that1.Thing) {
		return false
	}
	return true
}
func (this *UpdateThingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateThingRequest)
	if !ok {
		that2, ok := that.(UpdateThingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Thing.Equal(that1.Thing) {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *UpdateThingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateThingResponse)
	if !ok {
		that2, ok := that.(UpdateThingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Thing.Equal(that1.Thing) {
		return false
	}
	return true
}
func (this *DeleteThingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteThingRequest)
	if !ok {
		that2, ok := that.(DeleteThingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Hard != that1.Hard {
		return false
	}
	return true
}
func (this *DeleteThingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteThingResponse)
	if !ok {
		that2, ok := that.(DeleteThingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateThingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&thingv1.CreateThingRequest{")
	if this.Thing != nil {
		s = append(s, "Thing: "+fmt.Sprintf("%#v", this.Thing)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateThingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&thingv1.CreateThingResponse{")
	if this.Thing != nil {
		s = append(s, "Thing: "+fmt.Sprintf("%#v", this.Thing)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListThingsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&thingv1.ListThingsRequest{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListThingsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&thingv1.ListThingsResponse{")
	if this.Things != nil {
		s = append(s, "Things: "+fmt.Sprintf("%#v", this.Things)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetThingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&thingv1.GetThingRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetThingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&thingv1.GetThingResponse{")
	if this.Thing != nil {
		s = append(s, "Thing: "+fmt.Sprintf("%#v", this.Thing)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&thingv1.UpdateThingRequest{")
	if this.Thing != nil {
		s = append(s, "Thing: "+fmt.Sprintf("%#v", this.Thing)+",\n")
	}
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&thingv1.UpdateThingResponse{")
	if this.Thing != nil {
		s = append(s, "Thing: "+fmt.Sprintf("%#v", this.Thing)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&thingv1.DeleteThingRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Hard: "+fmt.Sprintf("%#v", this.Hard)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&thingv1.DeleteThingResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringThingApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThingAPIClient is the client API for ThingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThingAPIClient interface {
	// CreateThing ...
	CreateThing(ctx context.Context, in *CreateThingRequest, opts ...grpc.CallOption) (*CreateThingResponse, error)
	// ListThings ...
	ListThings(ctx context.Context, in *ListThingsRequest, opts ...grpc.CallOption) (*ListThingsResponse, error)
	// GetThing ...
	GetThing(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*GetThingResponse, error)
	// UpdateThing ...
	UpdateThing(ctx context.Context, in *UpdateThingRequest, opts ...grpc.CallOption) (*UpdateThingResponse, error)
	// DeleteThing ...
	DeleteThing(ctx context.Context, in *DeleteThingRequest, opts ...grpc.CallOption) (*DeleteThingResponse, error)
}

type thingAPIClient struct {
	cc *grpc.ClientConn
}

func NewThingAPIClient(cc *grpc.ClientConn) ThingAPIClient {
	return &thingAPIClient{cc}
}

func (c *thingAPIClient) CreateThing(ctx context.Context, in *CreateThingRequest, opts ...grpc.CallOption) (*CreateThingResponse, error) {
	out := new(CreateThingResponse)
	err := c.cc.Invoke(ctx, "/activeiot.thing.v1.ThingAPI/CreateThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingAPIClient) ListThings(ctx context.Context, in *ListThingsRequest, opts ...grpc.CallOption) (*ListThingsResponse, error) {
	out := new(ListThingsResponse)
	err := c.cc.Invoke(ctx, "/activeiot.thing.v1.ThingAPI/ListThings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingAPIClient) GetThing(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*GetThingResponse, error) {
	out := new(GetThingResponse)
	err := c.cc.Invoke(ctx, "/activeiot.thing.v1.ThingAPI/GetThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingAPIClient) UpdateThing(ctx context.Context, in *UpdateThingRequest, opts ...grpc.CallOption) (*UpdateThingResponse, error) {
	out := new(UpdateThingResponse)
	err := c.cc.Invoke(ctx, "/activeiot.thing.v1.ThingAPI/UpdateThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingAPIClient) DeleteThing(ctx context.Context, in *DeleteThingRequest, opts ...grpc.CallOption) (*DeleteThingResponse, error) {
	out := new(DeleteThingResponse)
	err := c.cc.Invoke(ctx, "/activeiot.thing.v1.ThingAPI/DeleteThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingAPIServer is the server API for ThingAPI service.
type ThingAPIServer interface {
	// CreateThing ...
	CreateThing(context.Context, *CreateThingRequest) (*CreateThingResponse, error)
	// ListThings ...
	ListThings(context.Context, *ListThingsRequest) (*ListThingsResponse, error)
	// GetThing ...
	GetThing(context.Context, *GetThingRequest) (*GetThingResponse, error)
	// UpdateThing ...
	UpdateThing(context.Context, *UpdateThingRequest) (*UpdateThingResponse, error)
	// DeleteThing ...
	DeleteThing(context.Context, *DeleteThingRequest) (*DeleteThingResponse, error)
}

func RegisterThingAPIServer(s *grpc.Server, srv ThingAPIServer) {
	s.RegisterService(&_ThingAPI_serviceDesc, srv)
}

func _ThingAPI_CreateThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingAPIServer).CreateThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeiot.thing.v1.ThingAPI/CreateThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingAPIServer).CreateThing(ctx, req.(*CreateThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingAPI_ListThings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingAPIServer).ListThings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeiot.thing.v1.ThingAPI/ListThings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingAPIServer).ListThings(ctx, req.(*ListThingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingAPI_GetThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingAPIServer).GetThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeiot.thing.v1.ThingAPI/GetThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingAPIServer).GetThing(ctx, req.(*GetThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingAPI_UpdateThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingAPIServer).UpdateThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeiot.thing.v1.ThingAPI/UpdateThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingAPIServer).UpdateThing(ctx, req.(*UpdateThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingAPI_DeleteThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingAPIServer).DeleteThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeiot.thing.v1.ThingAPI/DeleteThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingAPIServer).DeleteThing(ctx, req.(*DeleteThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThingAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "activeiot.thing.v1.ThingAPI",
	HandlerType: (*ThingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThing",
			Handler:    _ThingAPI_CreateThing_Handler,
		},
		{
			MethodName: "ListThings",
			Handler:    _ThingAPI_ListThings_Handler,
		},
		{
			MethodName: "GetThing",
			Handler:    _ThingAPI_GetThing_Handler,
		},
		{
			MethodName: "UpdateThing",
			Handler:    _ThingAPI_UpdateThing_Handler,
		},
		{
			MethodName: "DeleteThing",
			Handler:    _ThingAPI_DeleteThing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/thing/v1/thing_api.proto",
}

func (m *CreateThingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Thing.Size()))
		n1, err := m.Thing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateThingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Thing.Size()))
		n2, err := m.Thing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ListThingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListThingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Options.Size()))
		n3, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ListThingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListThingsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Things) > 0 {
		for _, msg := range m.Things {
			dAtA[i] = 0xa
			i++
			i = encodeVarintThingApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetThingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetThingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Options != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Options.Size()))
		n4, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetThingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetThingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Thing.Size()))
		n5, err := m.Thing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UpdateThingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Thing.Size()))
		n6, err := m.Thing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Options != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Options.Size()))
		n7, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *UpdateThingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(m.Thing.Size()))
		n8, err := m.Thing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DeleteThingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThingApi(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Hard {
		dAtA[i] = 0x10
		i++
		if m.Hard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteThingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintThingApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateThingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Thing != nil {
		l = m.Thing.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *CreateThingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Thing != nil {
		l = m.Thing.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *ListThingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *ListThingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Things) > 0 {
		for _, e := range m.Things {
			l = e.Size()
			n += 1 + l + sovThingApi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovThingApi(uint64(m.Count))
	}
	return n
}

func (m *GetThingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThingApi(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *GetThingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Thing != nil {
		l = m.Thing.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *UpdateThingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Thing != nil {
		l = m.Thing.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *UpdateThingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Thing != nil {
		l = m.Thing.Size()
		n += 1 + l + sovThingApi(uint64(l))
	}
	return n
}

func (m *DeleteThingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovThingApi(uint64(l))
	}
	if m.Hard {
		n += 2
	}
	return n
}

func (m *DeleteThingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovThingApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThingApi(x uint64) (n int) {
	return sovThingApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateThingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThingRequest{`,
		`Thing:` + strings.Replace(fmt.Sprintf("%v", this.Thing), "Thing", "Thing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateThingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThingResponse{`,
		`Thing:` + strings.Replace(fmt.Sprintf("%v", this.Thing), "Thing", "Thing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListThingsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListThingsRequest{`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "ListOptions", "v1.ListOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListThingsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListThingsResponse{`,
		`Things:` + strings.Replace(fmt.Sprintf("%v", this.Things), "Thing", "Thing", 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetThingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetThingRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "GetOptions", "v1.GetOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetThingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetThingResponse{`,
		`Thing:` + strings.Replace(fmt.Sprintf("%v", this.Thing), "Thing", "Thing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThingRequest{`,
		`Thing:` + strings.Replace(fmt.Sprintf("%v", this.Thing), "Thing", "Thing", 1) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "UpdateOptions", "v1.UpdateOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThingResponse{`,
		`Thing:` + strings.Replace(fmt.Sprintf("%v", this.Thing), "Thing", "Thing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThingRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Hard:` + fmt.Sprintf("%v", this.Hard) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThingResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringThingApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateThingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thing == nil {
				m.Thing = &Thing{}
			}
			if err := m.Thing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thing == nil {
				m.Thing = &Thing{}
			}
			if err := m.Thing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListThingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListThingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListThingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.ListOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListThingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListThingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListThingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Things", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Things = append(m.Things, &Thing{})
			if err := m.Things[len(m.Things)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetThingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetThingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetThingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.GetOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetThingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetThingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetThingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thing == nil {
				m.Thing = &Thing{}
			}
			if err := m.Thing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thing == nil {
				m.Thing = &Thing{}
			}
			if err := m.Thing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.UpdateOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thing == nil {
				m.Thing = &Thing{}
			}
			if err := m.Thing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThingApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThingApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hard = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipThingApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThingApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThingApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThingApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThingApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThingApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthThingApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThingApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThingApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthThingApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThingApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThingApi   = fmt.Errorf("proto: integer overflow")
)
